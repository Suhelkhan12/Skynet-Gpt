import bot from "./assets/bot.svg";
import user from "./assets/user.svg";

const form = document.querySelector("form");
const chatContainer = document.querySelector("#chat_container");

let loadInterval;

// this function will load the three dots thinking animation when our bot ai will be fetching the data from backend
function loader(element) {
  element.textContent = "";

  loadInterval = setInterval(() => {
    // har 300 ms me ek . add hoga
    element.textContent += ".";

    // agar max 4 dots add ho gye to dubara se 0 dots ho jayege
    if (element.textContent === "....") {
      element.textContent = "";
    }
  }, 300);
}

// this function will make a typing effect of the user prompt or the prompt data which is fetched from the backedn
function typeText(element, text) {
  let index = 0;

  // isko hm hr 20 ms me array k ek ek elements kitraf print krayege

  let interval = setInterval(() => {
    if (index < text.length) {
      element.innerHTML += text.charAt(index);
      index++;
    } else {
      clearInterval(interval);
    }
  }, 20);
}

// this will function will create a unique id for every ai chat div which will be generated and with that unique id responses are accordingly going to get printed
function generateUniqueId() {
  // will create a time stamp every time a question is asked
  const timestamp = Date.now();

  // will create a random number
  const randomNumber = Math.random();

  // will create a hexadecimal string of 16 chars
  const hexadecimalString = randomNumber.toString(16);

  // and return a string which will be created after concaternation of upper 2
  return `id-${timestamp}-${hexadecimalString}`;
}

// this is the main function which is checking if the prompt send is done by user or done by ai backend and creating a chat string and adding id according to tht
function chatStripe(isAi, value, uniqueId) {
  return `
        <div class="wrapper ${isAi && "ai"}">
            <div class="chat">
                <div class="profile">
                    <img 
                      src=${isAi ? bot : user} 
                      alt="${isAi ? "bot" : "user"}" 
                    />
                </div>
                <div class="message" id=${uniqueId}>${value}</div>
            </div>
        </div>
    `;
}

// with this function we are submitting our form and that prompt generated by form will be sent to our backend and according to that answer will be given
const handleSubmit = async (e) => {
  // this will prevent reloading of page every time a prompt is submitted by user
  e.preventDefault();

  // this will take data from form
  const data = new FormData(form);

  // user's chatstripe
  chatContainer.innerHTML += chatStripe(false, data.get("prompt"));

  // to clear the textarea input
  form.reset();

  // bot's chatstripe
  const uniqueId = generateUniqueId();
  chatContainer.innerHTML += chatStripe(true, " ", uniqueId);

  // to focus scroll to the bottom
  // taki hmara scroll hota hai agar code generated by ai or our question is very large
  chatContainer.scrollTop = chatContainer.scrollHeight;

  // specific message div
  const messageDiv = document.getElementById(uniqueId);

  // messageDiv.innerHTML = "..."
  loader(messageDiv);

  // IMP IMP IMP IMP IMP IMP this is basically the point where we are fetching the data from our backend which is runnig at 5001 and that backend is fetching data from OPENAI api
  const response = await fetch("https://skynetgpt-bxew.onrender.com", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      prompt: data.get("prompt"),
    }),
  });

  clearInterval(loadInterval);
  messageDiv.innerHTML = " ";

  // agar response ok hai to
  if (response.ok) {
    const data = await response.json();
    const parsedData = data.bot.trim(); // trims any trailing spaces/'\n'

    typeText(messageDiv, parsedData);
  } else {
    const err = await response.text();

    messageDiv.innerHTML = "Something went wrong";
    alert(err);
  }
};

form.addEventListener("submit", handleSubmit);
form.addEventListener("keyup", (e) => {
  if (e.keyCode === 13) {
    handleSubmit(e);
  }
});
